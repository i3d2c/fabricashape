!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("fabric")):"function"==typeof define&&define.amd?define("fabricashape",["fabric"],e):"object"==typeof exports?exports.fabricashape=e(require("fabric")):t.fabricashape=e(t.fabric)}("undefined"!=typeof self?self:this,function(t){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(e,n){e.exports=t},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Line=void 0;var i=n(0),o=n(2),r=i.fabric.util.createClass(i.fabric.Rect,{type:"line",components:[],hasControls:!0,initialize:function(t){var e=this;t||(t={}),this.callSuper("initialize",t),this.bodyFill=t.fill||"",t.hasOwnProperty("bodyFill")&&(this.bodyFill=t.bodyFill),this.bodyText=t.text||"",o.Constants.RECT_DISABLED_CONTROLS.forEach(function(t){e.setControlVisible(t,!1)}),this.set("fill","transparent"),this.on({added:this._initComponents,modified:this._setComponentsPosition,scaling:this._setComponentsPosition,moving:this._setComponentsPosition,rotating:this._setComponentsPosition})},_initComponents:function(){this.text=new i.fabric.Text("",{visible:!1}),this.body=new i.fabric.Rect({width:this.width,height:this.height,top:this.top,left:this.left,fill:this.bodyFill}),this.components=[this.text,this.body],this._setupComponents(),this.setText(this.bodyText)},_setupComponents:function(){var t=this;this.components.forEach(function(e){e.set({excludeFromExport:!0,hasControls:!1,selectable:!1}),t.canvas.add(e),e.sendBackwards()})},_setComponentsPosition:function(){var t=this.height*this.scaleY,e=this.width*this.scaleX,n=this.getBoundingRect();this.text&&this.text.set({top:n.top+.5*(n.height-this.text.height),left:n.left+.5*(n.width-this.text.width)}),this.body.set({top:this.top,left:this.left,width:e,height:t,angle:this.angle})},getComponents:function(){return this.components},setText:function(t){"m"!==t.slice(-1)&&(t+="m"),this.text.set({text:t}),this._setComponentsPosition()},toObject:function(){return i.fabric.util.object.extend(this.callSuper("toObject"),{bodyFill:this.get("bodyFill"),bodyText:this.get("bodyText")})},_render:function(t){this.callSuper("_render",t)}});e.Line=r,i.fabric.Line=r,i.fabric.Line.fromObject=function(t,e){return i.fabric.Object._fromObject("Line",t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Constants=void 0;e.Constants={RECT_DISABLED_CONTROLS:["tl","tr","bl","br","mt","mb"]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Arrowline",{enumerable:!0,get:function(){return i.Arrowline}}),Object.defineProperty(e,"Canvas",{enumerable:!0,get:function(){return o.Canvas}}),Object.defineProperty(e,"Line",{enumerable:!0,get:function(){return r.Line}}),Object.defineProperty(e,"Constants",{enumerable:!0,get:function(){return s.Constants}});var i=n(4),o=n(5),r=n(1),s=n(2)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Arrowline=void 0;var i=n(0),o=n(1),r=i.fabric.util.createClass(o.Line,{type:"arrowline",_initComponents:function(){this.text=new i.fabric.Text("",{backgroundColor:"white"}),this.body=new i.fabric.Rect({fill:this.bodyFill}),this.leftTriangle=new i.fabric.Triangle({fill:this.bodyFill}),this.rightTriangle=new i.fabric.Triangle({fill:this.bodyFill}),this._setComponentsPosition(),this.components=[this.body,this.leftTriangle,this.rightTriangle,this.text],this._setupComponents(),this.setText(this.bodyText)},_setComponentsPosition:function(){var t=Math.PI/180,e=this.height*this.scaleY,n=this.width*this.scaleX,i=Math.cos(this.angle*t),o=Math.sin(this.angle*t),r=this.getBoundingRect();this.text.set({top:r.top+.5*(r.height-this.text.height),left:r.left+.5*(r.width-this.text.width),fontSize:18}),this.body.set({top:this.top+e*o+e/4*i,left:this.left+e*i-e/4*o,width:n-2*e,height:e/2,angle:this.angle}),this.leftTriangle.set({top:this.top+e*i,left:this.left-e*o,width:e,height:e,angle:this.angle-90}),this.rightTriangle.set({top:this.top+n*o,left:this.left+n*i,width:e,height:e,angle:this.angle+90})}});e.Arrowline=r,i.fabric.Arrowline=r,i.fabric.Arrowline.fromObject=function(t,e){return i.fabric.Object._fromObject("Arrowline",t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;var i=n(0),o=n(2),r=n(1);function s(t){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function a(t,e){return!e||"object"!==s(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var h=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=a(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t))).domElemendId=t,n.scale={value:null,shape:null},n.backgroundImage=null,n}var n,s,h;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,i.fabric.Canvas),n=e,(s=[{key:"addImage",value:function(t){var e=this,n=new FileReader;n.onload=function(){var t=document.createElement("img");t.src=n.result,e.backgroundImage=new i.fabric.Image(t),e.backgroundImage.scale(e.height/e.backgroundImage.height),e.add(e.backgroundImage),e.renderAll()},n.readAsDataURL(t)}},{key:"lockImage",value:function(){this.backgroundImage.sendToBack(),this.backgroundImage.hasControls=!1,this.backgroundImage.selectable=!1,this.discardActiveObject(),this.renderAll()}},{key:"_lockObjectsToBoundaries",value:function(){this.on("object:moving",function(t){var e=t.target;e.currentHeight>this.height||e.currentWidth>this.width||(e.setCoords(),(e.getBoundingRect().top<0||e.getBoundingRect().left<0)&&(e.top=Math.max(e.top,e.top-e.getBoundingRect().top),e.left=Math.max(e.left,e.left-e.getBoundingRect().left)),(e.getBoundingRect().top+e.getBoundingRect().height>this.height||e.getBoundingRect().left+e.getBoundingRect().width>this.width)&&(e.top=Math.min(e.top,this.height-e.getBoundingRect().height+e.top-e.getBoundingRect().top),e.left=Math.min(e.left,this.width-e.getBoundingRect().width+e.left-e.getBoundingRect().left)))})}},{key:"setScale",value:function(t){t.shape&&(this.scale.shape=t.shape),t.value&&(this.scale.value=t.value)}},{key:"getScale",value:function(){return this.scale}},{key:"lockScale",value:function(){this.scale.shape.hasControls=!1}},{key:"listToSelectDOM",value:function(t){var e=document.getElementById(this.domElemendId),n=document.createElement("select");n.id="fabricashapeShapeChoices",e.parentElement.appendChild(n);for(var i=0;i<t.length;i++){var o=document.createElement("option");o.value=t[i].label,o.text=t[i].label,o.style.backgroundColor=t[i].color,n.appendChild(o)}return n}},{key:"setShapeChoices",value:function(t){var e=this.listToSelectDOM(t);this.createReferenceLine(e)}},{key:"createReferenceLine",value:function(t){var e=this,n=new i.fabric.Rect({top:5,left:5,width:80,height:17,fill:t.options[t.selectedIndex].style.backgroundColor});this.add(n),this.item(this.size()-1).hasControls=!1,this.requestRenderAll();var r=function(){e.item(e.size()-1).set("fill",t.options[t.selectedIndex].style.backgroundColor),e.renderAll()};n.on("mousedown",function(){e.createReferenceLine(t),n.hasControls=!0,o.Constants.RECT_DISABLED_CONTROLS.forEach(function(t){n.setControlVisible(t,!1)}),n.off("mousedown")}),t.removeEventListener("change",r),t.addEventListener("change",r)}},{key:"createScaledLine",value:function(t){var e=this.scale.shape.width*this.scale.shape.scaleX/this.scale.value;return t.top=t.top*e,t.left=t.left*e,t.width=t.width*e,t.height=t.stroke*e,new r.Line(t)}}])&&l(n.prototype,s),h&&l(n,h),e}();e.Canvas=h}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,