!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("fabric")):"function"==typeof define&&define.amd?define("fabricashape",["fabric"],e):"object"==typeof exports?exports.fabricashape=e(require("fabric")):t.fabricashape=e(t.fabric)}("undefined"!=typeof self?self:this,(function(t){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(e,n){e.exports=t},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Line=void 0;var i=n(0),o=n(2),s=i.fabric.util.createClass(i.fabric.Rect,{type:"line",components:[],hasControls:!0,initialize:function(t){var e=this;t||(t={}),this.callSuper("initialize",t),this.bodyFill=t.fill||"",t.hasOwnProperty("bodyFill")&&(this.bodyFill=t.bodyFill),this.bodyText=t.text||"",t.hasOwnProperty("bodyText")&&(this.bodyText=t.bodyText),o.Constants.RECT_DISABLED_CONTROLS.forEach((function(t){e.setControlVisible(t,!1)})),this.set("fill","transparent"),this.on({added:this._initComponents,modified:this._setComponentsPosition,scaling:this._setComponentsPosition,moving:this._setComponentsPosition,rotating:this._setComponentsPosition})},_initComponents:function(){this.text=new i.fabric.Text("",{visible:!1}),this.body=new i.fabric.Rect({width:this.width,height:this.height,top:this.top,left:this.left,fill:this.bodyFill}),this.components=[this.text,this.body],this._setupComponents(),this.setText(this.bodyText)},_setupComponents:function(){var t=this;this.components.forEach((function(e){e.set({excludeFromExport:!0,hasControls:!1,selectable:!1}),t.canvas.add(e),e.sendBackwards()}))},_setComponentsPosition:function(){var t=this.height*this.scaleY,e=this.width*this.scaleX,n=this.getBoundingRect();this.text&&this.text.set({top:n.top+.5*(n.height-this.text.height),left:n.left+.5*(n.width-this.text.width)}),this.body.set({top:this.top,left:this.left,width:e,height:t,angle:this.angle})},getComponents:function(){return this.components},setText:function(t){this.bodyText=t,"m"!==t.slice(-1)&&(t+="m"),this.text.set({text:t}),this._setComponentsPosition()},_render:function(t){this.callSuper("_render",t)},clear:function(){this.canvas.remove(this.components)},toObject:function(){return i.fabric.util.object.extend(this.callSuper("toObject"),{bodyFill:this.get("bodyFill"),bodyText:this.get("bodyText")})}});e.Line=s,i.fabric.Line=s,i.fabric.Line.fromObject=function(t,e){return i.fabric.Object._fromObject("Line",t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Constants=void 0;e.Constants={RECT_DISABLED_CONTROLS:["tl","tr","bl","br","mt","mb"]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Arrowline",{enumerable:!0,get:function(){return i.Arrowline}}),Object.defineProperty(e,"Canvas",{enumerable:!0,get:function(){return o.Canvas}}),Object.defineProperty(e,"Line",{enumerable:!0,get:function(){return s.Line}}),Object.defineProperty(e,"Constants",{enumerable:!0,get:function(){return r.Constants}});var i=n(4),o=n(5),s=n(1),r=n(2)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Arrowline=void 0;var i=n(0),o=n(1),s=i.fabric.util.createClass(o.Line,{type:"arrowline",_initComponents:function(){this.text=new i.fabric.Text(this.bodyText,{backgroundColor:"white"}),this.body=new i.fabric.Rect({fill:this.bodyFill}),this.leftTriangle=new i.fabric.Triangle({fill:this.bodyFill}),this.rightTriangle=new i.fabric.Triangle({fill:this.bodyFill}),this._setComponentsPosition(),this.components=[this.body,this.leftTriangle,this.rightTriangle,this.text],this._setupComponents(),this.setText(this.bodyText)},_setComponentsPosition:function(){var t=Math.PI/180,e=this.height*this.scaleY,n=this.width*this.scaleX,i=Math.cos(this.angle*t),o=Math.sin(this.angle*t),s=this.getBoundingRect();this.text.set({top:s.top+.5*(s.height-this.text.height),left:s.left+.5*(s.width-this.text.width),fontSize:18}),this.body.set({top:this.top+e*o+e/4*i,left:this.left+e*i-e/4*o,width:n-2*e,height:e/2,angle:this.angle}),this.leftTriangle.set({top:this.top+e*i,left:this.left-e*o,width:e,height:e,angle:this.angle-90}),this.rightTriangle.set({top:this.top+n*o,left:this.left+n*i,width:e,height:e,angle:this.angle+90})}});e.Arrowline=s,i.fabric.Arrowline=s,i.fabric.Arrowline.fromObject=function(t,e){return i.fabric.Object._fromObject("Arrowline",t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;var i=n(0),o=n(2),s=n(1);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function l(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var h=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t))).domElemendId=t,n.scale={value:null,shape:null},n.customBackgroundImage=null,n}var n,r,h;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,t),n=e,(r=[{key:"addImage",value:function(t){var e=this,n=new FileReader;n.onload=function(){var t=document.createElement("img");t.src=n.result,e.customBackgroundImage=new i.fabric.Image(t),e.customBackgroundImage.scale(e.height/e.customBackgroundImage.height),e.add(e.customBackgroundImage),e.renderAll()},n.readAsDataURL(t)}},{key:"lockImage",value:function(){this.customBackgroundImage.sendToBack(),this.customBackgroundImage.hasControls=!1,this.customBackgroundImage.selectable=!1,this.discardActiveObject(),this.renderAll()}},{key:"_lockObjectsToBoundaries",value:function(){this.on("object:moving",(function(t){var e=t.target;e.currentHeight>this.height||e.currentWidth>this.width||(e.setCoords(),(e.getBoundingRect().top<0||e.getBoundingRect().left<0)&&(e.top=Math.max(e.top,e.top-e.getBoundingRect().top),e.left=Math.max(e.left,e.left-e.getBoundingRect().left)),(e.getBoundingRect().top+e.getBoundingRect().height>this.height||e.getBoundingRect().left+e.getBoundingRect().width>this.width)&&(e.top=Math.min(e.top,this.height-e.getBoundingRect().height+e.top-e.getBoundingRect().top),e.left=Math.min(e.left,this.width-e.getBoundingRect().width+e.left-e.getBoundingRect().left)))}))}},{key:"setScale",value:function(t){t.shape&&(this.scale.shape=t.shape,this.scale.shape.hasControls=!1),t.value&&(this.scale.value=t.value)}},{key:"getScale",value:function(){return this.scale}},{key:"lockScale",value:function(){this.scale.shape.hasControls=!1}},{key:"remove",value:function(t){console.log("biche"),Array.isArray(t)?t.forEach((function(t){t.hasOwnProperty("clear")&&t.clear()})):t.hasOwnProperty("clear")&&t.clear(),this.callSuper("remove",t)}},{key:"clearScale",value:function(){console.log("clear scales ujbjg"),this.scale.shape&&(console.log("clear scale"),this.clear(),this.remove(this.scale.shape))}},{key:"listToSelectDOM",value:function(t){var e=document.getElementById(this.domElemendId),n=document.createElement("select");n.id="fabricashapeShapeChoices",e.parentElement.appendChild(n);for(var i=0;i<t.length;i++){var o=document.createElement("option");o.value=t[i].label,o.text=t[i].label,o.style.backgroundColor=t[i].color,n.appendChild(o)}return n}},{key:"setShapeChoices",value:function(t){var e=this.listToSelectDOM(t);this.createReferenceLine(e)}},{key:"createReferenceLine",value:function(t){var e=this,n=new i.fabric.Rect({top:5,left:5,width:80,height:17,fill:t.options[t.selectedIndex].style.backgroundColor});this.add(n),this.item(this.size()-1).hasControls=!1,this.requestRenderAll();var s=function(){e.item(e.size()-1).set("fill",t.options[t.selectedIndex].style.backgroundColor),e.renderAll()};n.on("mousedown",(function(){e.createReferenceLine(t),n.hasControls=!0,o.Constants.RECT_DISABLED_CONTROLS.forEach((function(t){n.setControlVisible(t,!1)})),n.off("mousedown")})),t.removeEventListener("change",s),t.addEventListener("change",s)}},{key:"createScaledLine",value:function(t){var e=this.scale.shape.width*this.scale.shape.scaleX/this.scale.value;return t.top=t.top*e,t.left=t.left*e,t.width=t.width*e,t.height=t.stroke*e,new s.Line(t)}}])&&a(n.prototype,r),h&&a(n,h),e}(i.fabric.Canvas);e.Canvas=h}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,